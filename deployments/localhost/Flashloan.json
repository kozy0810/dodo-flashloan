{
  "address": "0x511930A41fae024714948b700764394CB759B72f",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        }
      ],
      "name": "SentProfit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SwapFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "DPPFlashLoanCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "DSPFlashLoanCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "DVMFlashLoanCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "flashLoanPool",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "loanAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "protocol",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "address[]",
                      "name": "path",
                      "type": "address[]"
                    }
                  ],
                  "internalType": "struct IFlashloan.Hop[]",
                  "name": "hops",
                  "type": "tuple[]"
                },
                {
                  "internalType": "uint16",
                  "name": "part",
                  "type": "uint16"
                }
              ],
              "internalType": "struct IFlashloan.Route[]",
              "name": "routes",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IFlashloan.FlashParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "dodoFlashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdc853925cfca32ef1bd91fa0ed177b02c5b22a9c97319fb8ab9159857d2f73ce",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x511930A41fae024714948b700764394CB759B72f",
    "transactionIndex": 0,
    "gasUsed": "1952425",
    "logsBloom": "0x
    "blockHash": "0x62e88b3c63a2a31c0d34106edda6d3b94900cb2e333bf91e3216b4fa35f72618",
    "transactionHash": "0xdc853925cfca32ef1bd91fa0ed177b02c5b22a9c97319fb8ab9159857d2f73ce",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 28583601,
        "transactionHash": "0xdc853925cfca32ef1bd91fa0ed177b02c5b22a9c97319fb8ab9159857d2f73ce",
        "address": "0x511930A41fae024714948b700764394CB759B72f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x62e88b3c63a2a31c0d34106edda6d3b94900cb2e333bf91e3216b4fa35f72618"
      }
    ],
    "blockNumber": 28583601,
    "cumulativeGasUsed": "1952425",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "15353544c415a04236909e59ccb7c4b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"SentProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwapFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DPPFlashLoanCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DSPFlashLoanCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DVMFlashLoanCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"flashLoanPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"internalType\":\"struct IFlashloan.Hop[]\",\"name\":\"hops\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"part\",\"type\":\"uint16\"}],\"internalType\":\"struct IFlashloan.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IFlashloan.FlashParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"dodoFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Flashloan.sol\":\"Flashloan\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/Flashloan.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./uniswap/IUniswapV2Router.sol\\\";\\nimport \\\"./uniswap/v3/ISwapRouter.sol\\\";\\n\\nimport \\\"./dodo/IDODO.sol\\\";\\n\\nimport \\\"./interfaces/IFlashloan.sol\\\";\\n\\nimport \\\"./base/DodoBase.sol\\\";\\nimport \\\"./dodo/IDODOProxy.sol\\\";\\nimport \\\"./base/FlashloanValidation.sol\\\";\\nimport \\\"./base/Withdraw.sol\\\";\\n\\nimport \\\"./libraries/Part.sol\\\";\\nimport \\\"./libraries/RouteUtils.sol\\\";\\n\\ncontract Flashloan is IFlashloan, DodoBase, FlashloanValidation, Withdraw {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event SentProfit(address recipient, uint256 profit);\\n    event SwapFinished(address token, uint256 amount);\\n\\n    function dodoFlashLoan(FlashParams memory params) external checkParams(params) {\\n        bytes memory data = abi.encode(\\n            FlashCallbackData({\\n                me: msg.sender,\\n                flashLoanPool: params.flashLoanPool,\\n                loanAmount: params.loanAmount,\\n                routes: params.routes\\n            })\\n        );\\n\\n        address loanToken = RouteUtils.getInitialToken(params.routes[0]);\\n        IDODO(params.flashLoanPool).flashLoan(\\n            IDODO(params.flashLoanPool)._BASE_TOKEN_() == loanToken\\n                ? params.loanAmount\\n                : 0,\\n            IDODO(params.flashLoanPool)._BASE_TOKEN_() == loanToken\\n                ? 0\\n                : params.loanAmount,\\n            address(this),\\n            data\\n        );\\n    }\\n\\n    function _flashLoanCallBack(\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata data\\n    ) internal override {\\n        FlashCallbackData memory decoded = abi.decode(\\n            data,\\n            (FlashCallbackData)\\n        );\\n        address loanToken = RouteUtils.getInitialToken(decoded.routes[0]);\\n\\n        require(\\n            IERC20(loanToken).balanceOf(address(this)) >= decoded.loanAmount,\\n            \\\"Failed to borrow loan token\\\"\\n        );\\n\\n        routeLoop(decoded.routes, decoded.loanAmount);\\n        emit SwapFinished(loanToken, IERC20(loanToken).balanceOf(address(this)));\\n\\n        require(IERC20(loanToken).balanceOf(address(this)) >= decoded.loanAmount, \\\"Not enough amount to return loan\\\");\\n        //Return funds\\n        IERC20(loanToken).transfer(decoded.flashLoanPool, decoded.loanAmount);\\n\\n        // send all loanToken to msg.sender\\n        uint256 remained = IERC20(loanToken).balanceOf(address(this));\\n        IERC20(loanToken).transfer(decoded.me, remained);\\n        emit SentProfit(decoded.me, remained);\\n    }\\n\\n    function routeLoop(Route[] memory routes, uint256 totalAmount) internal checkTotalRoutePart(routes) {\\n        for (uint256 i = 0; i < routes.length; i++) {\\n            uint256 amountIn = Part.partToAmountIn(routes[i].part, totalAmount);\\n            hopLoop(routes[i], amountIn);\\n        }\\n    }\\n\\n    function hopLoop(Route memory route, uint256 totalAmount) internal {\\n        uint256 amountIn = totalAmount;\\n        for (uint256 i = 0; i < route.hops.length; i++) {\\n            amountIn = pickProtocol(route.hops[i], amountIn);\\n        }\\n    }\\n\\n    function pickProtocol(Hop memory hop, uint256 amountIn) internal returns (uint256 amountOut) {\\n        if (hop.protocol == 0) {\\n            amountOut = uniswapV3(hop.data, amountIn, hop.path);\\n        } else if (hop.protocol < 8) {\\n            amountOut = uniswapV2(hop.data, amountIn, hop.path);\\n        } else {\\n            amountOut = dodoV2Swap(hop.data, amountIn, hop.path);\\n        }\\n    }\\n\\n    function uniswapV3(\\n        bytes memory data,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal returns (uint256 amountOut) {\\n        (address router, uint24 fee) = abi.decode(data, (address, uint24));\\n        ISwapRouter swapRouter = ISwapRouter(router);\\n        approveToken(path[0], address(swapRouter), amountIn);\\n\\n        // single swaps\\n        amountOut = swapRouter.exactInputSingle(\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: path[0],\\n                tokenOut: path[1],\\n                fee: fee,\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountIn: amountIn,\\n                amountOutMinimum: 0,\\n                sqrtPriceLimitX96: 0\\n            })\\n        );\\n    }\\n\\n    function uniswapV2(\\n        bytes memory data,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal returns (uint256 amountOut) {\\n        address router = abi.decode(data, (address));\\n        approveToken(path[0], router, amountIn);\\n        return\\n            IUniswapV2Router(router).swapExactTokensForTokens(\\n                amountIn,\\n                1,\\n                path,\\n                address(this),\\n                block.timestamp\\n            )[1];\\n    }\\n\\n    function dodoV2Swap(\\n        bytes memory data,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal returns (uint256 amountOut) {\\n        (address dodoV2Pool, address dodoApprove, address dodoProxy) = abi\\n            .decode(data, (address, address, address));\\n        address[] memory dodoPairs = new address[](1); //one-hop\\n        dodoPairs[0] = dodoV2Pool;\\n        uint256 directions = IDODO(dodoV2Pool)._BASE_TOKEN_() == path[0]\\n            ? 0\\n            : 1;\\n        approveToken(path[0], dodoApprove, amountIn);\\n        amountOut = IDODOProxy(dodoProxy).dodoSwapV2TokenToToken(\\n            path[0],\\n            path[1],\\n            amountIn,\\n            1,\\n            dodoPairs,\\n            directions,\\n            false,\\n            block.timestamp\\n        );\\n    }\\n\\n    function approveToken(\\n        address token,\\n        address to,\\n        uint256 amountIn\\n    ) internal {\\n        require(IERC20(token).approve(to, amountIn), \\\"approve failed.\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xa146e7a46eca23341f5ff859c38b8e3bf3bbc4e19680b71091c577f45dd582a6\",\"license\":\"Apache-2.0\"},\"contracts/base/DodoBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IFlashloan.sol\\\";\\nimport \\\"../dodo/IDODO.sol\\\";\\nimport \\\"../libraries/RouteUtils.sol\\\";\\n\\ncontract DodoBase is IFlashloan {\\n    modifier checkParams(FlashParams memory params) {\\n        address loanToken = RouteUtils.getInitialToken(params.routes[0]);\\n        bool loanEqBase = loanToken ==\\n            IDODO(params.flashLoanPool)._BASE_TOKEN_();\\n        bool loanEqQuote = loanToken ==\\n            IDODO(params.flashLoanPool)._QUOTE_TOKEN_();\\n        require(loanEqBase || loanEqQuote, \\\"Wrong flashloan pool address\\\");\\n        _;\\n    }\\n\\n    //Note: CallBack function executed by DODOV2(DVM) flashLoan pool\\n    function DVMFlashLoanCall(\\n        address sender,\\n        uint256 baseAmount,\\n        uint256 quoteAmount,\\n        bytes calldata data\\n    ) external {\\n        _flashLoanCallBack(sender, baseAmount, quoteAmount, data);\\n    }\\n\\n    //Note: CallBack function executed by DODOV2(DPP) flashLoan pool\\n    function DPPFlashLoanCall(\\n        address sender,\\n        uint256 baseAmount,\\n        uint256 quoteAmount,\\n        bytes calldata data\\n    ) external {\\n        _flashLoanCallBack(sender, baseAmount, quoteAmount, data);\\n    }\\n\\n    //Note: CallBack function executed by DODOV2(DSP) flashLoan pool\\n    function DSPFlashLoanCall(\\n        address sender,\\n        uint256 baseAmount,\\n        uint256 quoteAmount,\\n        bytes calldata data\\n    ) external {\\n        _flashLoanCallBack(sender, baseAmount, quoteAmount, data);\\n    }\\n\\n    function _flashLoanCallBack(\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata data\\n    ) internal virtual {}\\n}\",\"keccak256\":\"0xd4a8772d1788526a3d6f189253a607b10a395b0b8ad9f71428f9bcf83de109b9\",\"license\":\"MIT\"},\"contracts/base/FlashloanValidation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IFlashloan.sol\\\";\\n\\nabstract contract FlashloanValidation {\\n    uint256 constant MAX_PROTOCOL = 8;\\n\\n    modifier checkTotalRoutePart(IFlashloan.Route[] memory routes) {\\n        uint16 totalPart = 0;\\n        for (uint256 i = 0; i < uint256(routes.length); i++) {\\n            totalPart += routes[i].part;\\n        }\\n        require(totalPart == 10000, \\\"Route part error\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0xe3d679e0e0bcb75a5c86d6bd44d8984060616d145977c2cfdc2710a0e15a6297\",\"license\":\"MIT\"},\"contracts/base/Withdraw.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract Withdraw is Ownable, ReentrancyGuard {\\n    event Withdrawal(address indexed sender, uint256 amount);\\n\\n    function withdrawToken(\\n        IERC20 token,\\n        address _to,\\n        uint256 _value\\n    ) public onlyOwner nonReentrant {\\n        require(token.balanceOf(address(this)) >= _value, \\\"Not enough token\\\");\\n        SafeERC20.safeTransfer(token, _to, _value);\\n        emit Withdrawal(_to, _value);\\n    }\\n}\",\"keccak256\":\"0xe09a173dab7b6b720e6bf02ff13041804cbd666cdc79570f70cff31bcbcfdf92\",\"license\":\"MIT\"},\"contracts/dodo/IDODO.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// import {IERC20} from \\\"./intf/IERC20.sol\\\";\\n\\ninterface IDODO {\\n    function flashLoan(\\n        uint256 baseAmount,\\n        uint256 quoteAmount,\\n        address assetTo,\\n        bytes calldata data\\n    ) external;\\n\\n    function _BASE_TOKEN_() external view returns (address);\\n    function _BASE_RESERVE_() external view returns (uint112);\\n    function _QUOTE_TOKEN_() external view returns (address);\\n    function _QUOTE_RESERVE_() external view returns (uint112);\\n}\",\"keccak256\":\"0x8f5d0f078e31432c95429e40f06c4d605da175eb507c006e4706895c0f1a641c\",\"license\":\"AGPL-3.0\"},\"contracts/dodo/IDODOProxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IDODOProxy {\\n    function dodoSwapV1(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromTokenAmount,\\n        uint256 minReturnAmount,\\n        address[] memory dodoPairs,\\n        uint256 directions,\\n        bool,\\n        uint256 deadLine\\n    ) external payable returns (uint256 returnAmount);\\n\\n    function dodoSwapV2TokenToToken(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromTokenAmount,\\n        uint256 minReturnAmount,\\n        address[] memory dodoPairs,\\n        uint256 directions,\\n        bool isIncentive,\\n        uint256 deadLine\\n    ) external returns (uint256 returnAmount);\\n}\",\"keccak256\":\"0xa58db5b16dd7fda5a8efab8d24dc6b77091d6d91e17fb9930e3b3041a5721478\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IFlashloan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IFlashloan {\\n    struct Hop {\\n        uint8 protocol;\\n        bytes data;\\n        address[] path;\\n    }\\n\\n    struct Route {\\n        Hop[] hops;\\n        uint16 part;\\n    }\\n\\n    struct FlashParams {\\n        address flashLoanPool;\\n        uint256 loanAmount;\\n        Route[] routes;\\n    }\\n\\n    struct FlashCallbackData {\\n        address me;\\n        address flashLoanPool;\\n        uint256 loanAmount;\\n        Route[] routes;\\n    }\\n}\",\"keccak256\":\"0x4b60fc9ce4402f5a5fa5f60cb2733f292a0395b3642b3911b16d32e6234e6065\",\"license\":\"MIT\"},\"contracts/libraries/Part.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary Part {\\n    using SafeMath for uint256;\\n    using SafeMath for uint16;\\n\\n    function partToAmountIn(\\n        uint16 part,\\n        uint256 total\\n    ) internal pure returns (uint256 amountIn) {\\n        amountIn = (total * part) / 10**4;\\n    }\\n}\",\"keccak256\":\"0xa0e10a2c58d099abcd06263f13bbe99b5139d3c175a7f402a5096f15a8e4d121\",\"license\":\"MIT\"},\"contracts/libraries/RouteUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IFlashloan.sol\\\";\\n\\nlibrary RouteUtils {\\n    function getInitialToken(IFlashloan.Route memory route) internal pure returns (address) {\\n        return route.hops[0].path[0];\\n    }\\n}\",\"keccak256\":\"0x21d4a734b8b0dfb3365e192b12ce51c306197c9e6d4328605c1bb43e0015ec89\",\"license\":\"MIT\"},\"contracts/uniswap/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\\n\",\"keccak256\":\"0x1271a13c917d674fced86d29f1eed17883a6dc26d519133351f9ec5fa41553a4\",\"license\":\"AGPL-3.0\"},\"contracts/uniswap/v3/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport './IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\",\"keccak256\":\"0x5ceaca0b7e16f6700020ea7f627fa86dd32f1f94c93ee2ef3ec1192cc031acac\",\"license\":\"GPL-2.0-or-later\"},\"contracts/uniswap/v3/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\",\"keccak256\":\"0x0b55e4b363711251c767e2ea579cdab2625e81857b2ccebe26060ce5bcf428f8\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a33610023565b60018055610073565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612182806100826000396000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c806301e336671461007d5780630cdabeba14610092578063715018a6146100a55780637ed1f1dd146100ad5780638da5cb5b146100c0578063d5b99797146100ad578063eb2021c3146100ad578063f2fde38b146100e2575b600080fd5b61009061008b366004611641565b6100f5565b005b6100906100a0366004611a28565b610296565b610090610645565b6100906100bb366004611ab1565b61067b565b6000546001600160a01b03166040516100d99190611b46565b60405180910390f35b6100906100f0366004611b5a565b61068f565b6000546001600160a01b031633146101285760405162461bcd60e51b815260040161011f90611b77565b60405180910390fd5b6002600154141561017b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161011f565b60026001556040516370a0823160e01b815281906001600160a01b038516906370a08231906101ae903090600401611b46565b60206040518083038186803b1580156101c657600080fd5b505afa1580156101da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fe9190611bac565b101561023f5760405162461bcd60e51b815260206004820152601060248201526f2737ba1032b737bab3b4103a37b5b2b760811b604482015260640161011f565b61024a83838361072a565b816001600160a01b03167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b658260405161028591815260200190565b60405180910390a250506001805550565b8060006102c082604001516000815181106102b3576102b3611bc5565b6020026020010151610785565b9050600082600001516001600160a01b0316634a248d2a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561030157600080fd5b505afa158015610315573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103399190611bdb565b6001600160a01b0316826001600160a01b0316149050600083600001516001600160a01b031663d4b970466040518163ffffffff1660e01b815260040160206040518083038186803b15801561038e57600080fd5b505afa1580156103a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c69190611bdb565b6001600160a01b0316836001600160a01b031614905081806103e55750805b6104315760405162461bcd60e51b815260206004820152601c60248201527f57726f6e6720666c6173686c6f616e20706f6f6c206164647265737300000000604482015260640161011f565b6040805160808101825233815286516001600160a01b031660208083019190915287810151828401528783015160608301529151600092610473929101611c94565b604051602081830303815290604052905060006104a087604001516000815181106102b3576102b3611bc5565b905086600001516001600160a01b031663d0a494e4826001600160a01b031689600001516001600160a01b0316634a248d2a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104fc57600080fd5b505afa158015610510573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105349190611bdb565b6001600160a01b03161461054957600061054f565b88602001515b836001600160a01b03168a600001516001600160a01b0316634a248d2a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561059657600080fd5b505afa1580156105aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ce9190611bdb565b6001600160a01b0316146105e65789602001516105e9565b60005b30866040518563ffffffff1660e01b815260040161060a9493929190611db5565b600060405180830381600087803b15801561062457600080fd5b505af1158015610638573d6000803e3d6000fd5b5050505050505050505050565b6000546001600160a01b0316331461066f5760405162461bcd60e51b815260040161011f90611b77565b61067960006107cb565b565b610688858585858561081b565b5050505050565b6000546001600160a01b031633146106b95760405162461bcd60e51b815260040161011f90611b77565b6001600160a01b03811661071e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161011f565b610727816107cb565b50565b6107808363a9059cbb60e01b8484604051602401610749929190611dec565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610c7b565b505050565b6000816000015160008151811061079e5761079e611bc5565b6020026020010151604001516000815181106107bc576107bc611bc5565b60200260200101519050919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061082982840184611e05565b9050600061084782606001516000815181106102b3576102b3611bc5565b90508160400151816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161087a9190611b46565b60206040518083038186803b15801561089257600080fd5b505afa1580156108a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ca9190611bac565b10156109185760405162461bcd60e51b815260206004820152601b60248201527f4661696c656420746f20626f72726f77206c6f616e20746f6b656e0000000000604482015260640161011f565b61092a82606001518360400151610d4d565b7ffdc1bd83776f7aa310fcf2b1915ae1c6c16a4cfb48ebcea2bf15febd084c03de81826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016109789190611b46565b60206040518083038186803b15801561099057600080fd5b505afa1580156109a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c89190611bac565b6040516109d6929190611dec565b60405180910390a160408083015190516370a0823160e01b81526001600160a01b038316906370a0823190610a0f903090600401611b46565b60206040518083038186803b158015610a2757600080fd5b505afa158015610a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5f9190611bac565b1015610aad5760405162461bcd60e51b815260206004820181905260248201527f4e6f7420656e6f75676820616d6f756e7420746f2072657475726e206c6f616e604482015260640161011f565b6020820151604080840151905163a9059cbb60e01b81526001600160a01b0384169263a9059cbb92610ae192600401611dec565b602060405180830381600087803b158015610afb57600080fd5b505af1158015610b0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b339190611eb7565b506040516370a0823160e01b81526000906001600160a01b038316906370a0823190610b63903090600401611b46565b60206040518083038186803b158015610b7b57600080fd5b505afa158015610b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb39190611bac565b835160405163a9059cbb60e01b81529192506001600160a01b0384169163a9059cbb91610be4918590600401611dec565b602060405180830381600087803b158015610bfe57600080fd5b505af1158015610c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c369190611eb7565b5082516040517f2b312ac7b7c9b2fc53c9398d48ed2df4c1d192a03cc090b47087b2936ba0a61f91610c69918490611dec565b60405180910390a15050505050505050565b6000610cd0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e4e9092919063ffffffff16565b8051909150156107805780806020019051810190610cee9190611eb7565b6107805760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161011f565b816000805b8251811015610d9857828181518110610d6d57610d6d611bc5565b60200260200101516020015182610d849190611eef565b915080610d9081611f15565b915050610d52565b508061ffff1661271014610de15760405162461bcd60e51b815260206004820152601060248201526f2937baba32903830b93a1032b93937b960811b604482015260640161011f565b60005b8451811015610688576000610e16868381518110610e0457610e04611bc5565b60200260200101516020015186610e67565b9050610e3b868381518110610e2d57610e2d611bc5565b602002602001015182610e84565b5080610e4681611f15565b915050610de4565b6060610e5d8484600085610ed3565b90505b9392505050565b6000612710610e7a61ffff851684611f30565b610e609190611f4f565b8060005b835151811015610ecd57610eb984600001518281518110610eab57610eab611bc5565b602002602001015183611004565b915080610ec581611f15565b915050610e88565b50505050565b606082471015610f345760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161011f565b6001600160a01b0385163b610f8b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161011f565b600080866001600160a01b03168587604051610fa79190611f71565b60006040518083038185875af1925050503d8060008114610fe4576040519150601f19603f3d011682016040523d82523d6000602084013e610fe9565b606091505b5091509150610ff9828286611066565b979650505050505050565b815160009060ff1661102a57611023836020015183856040015161109f565b9050611060565b6008836000015160ff16101561104d576110238360200151838560400151611260565b610e60836020015183856040015161134d565b92915050565b60608315611075575081610e60565b8251156110855782518084602001fd5b8160405162461bcd60e51b815260040161011f9190611f8d565b6000806000858060200190518101906110b89190611fa0565b9150915060008290506110e6856000815181106110d7576110d7611bc5565b6020026020010151828861156e565b806001600160a01b031663414bf3896040518061010001604052808860008151811061111457611114611bc5565b60200260200101516001600160a01b031681526020018860018151811061113d5761113d611bc5565b60200260200101516001600160a01b031681526020018562ffffff168152602001306001600160a01b031681526020014281526020018981526020016000815260200160006001600160a01b03168152506040518263ffffffff1660e01b815260040161120e919081516001600160a01b03908116825260208084015182169083015260408084015162ffffff16908301526060808401518216908301526080808401519083015260a0838101519083015260c0808401519083015260e09283015116918101919091526101000190565b602060405180830381600087803b15801561122857600080fd5b505af115801561123c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff99190611bac565b600080848060200190518101906112779190611bdb565b905061129e8360008151811061128f5761128f611bc5565b6020026020010151828661156e565b6040516338ed173960e01b81526001600160a01b038216906338ed1739906112d3908790600190889030904290600401611fe2565b600060405180830381600087803b1580156112ed57600080fd5b505af1158015611301573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611329919081019061201e565b60018151811061133b5761133b611bc5565b60200260200101519150509392505050565b6000806000808680602001905181019061136791906120a3565b6040805160018082528183019092529396509194509250600091906020808301908036833701905050905083816000815181106113a6576113a6611bc5565b60200260200101906001600160a01b031690816001600160a01b0316815250506000866000815181106113db576113db611bc5565b60200260200101516001600160a01b0316856001600160a01b0316634a248d2a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561142557600080fd5b505afa158015611439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145d9190611bdb565b6001600160a01b031614611472576001611475565b60005b60ff16905061149f8760008151811061149057611490611bc5565b6020026020010151858a61156e565b826001600160a01b031663f87dc1b7886000815181106114c1576114c1611bc5565b6020026020010151896001815181106114dc576114dc611bc5565b60200260200101518b600187876000426040518963ffffffff1660e01b815260040161150f9897969594939291906120f0565b602060405180830381600087803b15801561152957600080fd5b505af115801561153d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115619190611bac565b9998505050505050505050565b60405163095ea7b360e01b81526001600160a01b0384169063095ea7b39061159c9085908590600401611dec565b602060405180830381600087803b1580156115b657600080fd5b505af11580156115ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ee9190611eb7565b6107805760405162461bcd60e51b815260206004820152600f60248201526e30b8383937bb32903330b4b632b21760891b604482015260640161011f565b6001600160a01b038116811461072757600080fd5b60008060006060848603121561165657600080fd5b83356116618161162c565b925060208401356116718161162c565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156116ba576116ba611682565b60405290565b604051606081016001600160401b03811182821017156116ba576116ba611682565b604051601f8201601f191681016001600160401b038111828210171561170a5761170a611682565b604052919050565b60006001600160401b0382111561172b5761172b611682565b5060051b60200190565b600082601f83011261174657600080fd5b8135602061175b61175683611712565b6116e2565b82815260059290921b8401810191818101908684111561177a57600080fd5b8286015b8481101561179e5780356117918161162c565b835291830191830161177e565b509695505050505050565b803561ffff811681146117bb57600080fd5b919050565b600082601f8301126117d157600080fd5b6117de6117568335611712565b82358082526020808301929160051b8501018510156117fc57600080fd5b602084015b6020853560051b860101811015611a1f576001600160401b038135111561182757600080fd5b601f1960408235870188038201121561183f57600080fd5b611847611698565b6001600160401b036020843589010135111561186257600080fd5b82358701602081013501603f8101891361187b57600080fd5b61188b6117566020830135611712565b602082810135808352908201919060051b83016040018b10156118ad57600080fd5b604083015b6040602085013560051b8501018110156119ef576001600160401b03813511156118db57600080fd5b803584016060818e03603f190112156118f357600080fd5b6118fb6116c0565b604082013560ff81161461190e57600080fd5b604082013581526001600160401b036060830135111561192d57600080fd5b8d605f60608401358401011261194257600080fd5b60406060830135830101356001600160401b0381111561196457611964611682565b61197560208a601f840116016116e2565b8181528f606083606087013587010101111561199057600080fd5b81606080860135860101602083013760006020838301015280602084015250506001600160401b03608083013511156119c857600080fd5b6119db8e60406080850135850101611735565b6040820152845250602092830192016118b2565b50835250611a049050833588016040016117a9565b60208201528085525050602083019250602081019050611801565b50949350505050565b600060208284031215611a3a57600080fd5b81356001600160401b0380821115611a5157600080fd5b9083019060608286031215611a6557600080fd5b611a6d6116c0565b8235611a788161162c565b815260208381013590820152604083013582811115611a9657600080fd5b611aa2878286016117c0565b60408301525095945050505050565b600080600080600060808688031215611ac957600080fd5b8535611ad48161162c565b9450602086013593506040860135925060608601356001600160401b0380821115611afe57600080fd5b818801915088601f830112611b1257600080fd5b813581811115611b2157600080fd5b896020828501011115611b3357600080fd5b9699959850939650602001949392505050565b6001600160a01b0391909116815260200190565b600060208284031215611b6c57600080fd5b8135610e608161162c565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611bbe57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611bed57600080fd5b8151610e608161162c565b60005b83811015611c13578181015183820152602001611bfb565b83811115610ecd5750506000910152565b60008151808452611c3c816020860160208601611bf8565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b83811015611c895781516001600160a01b031687529582019590820190600101611c64565b509495945050505050565b602080825282516001600160a01b0390811683830152838201511660408084019190915283015160608084019190915280840151608080850152805160a085018190526000939260c0600583901b870181019385019290870190865b81811015611da75788860360bf190183528451805160408089528151908901819052600581901b89018701918a0190878a019060005b81811015611d8457605f198c8603018352835160ff81511686528d8101518b8f880152611d558c880182611c24565b9050604082015191508681036040880152611d708183611c50565b96505050928c0192918c0191600101611d26565b505050509088015161ffff16968801969096529386019391860191600101611cf0565b509398975050505050505050565b84815283602082015260018060a01b0383166040820152608060608201526000611de26080830184611c24565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b600060208284031215611e1757600080fd5b81356001600160401b0380821115611e2e57600080fd5b9083019060808286031215611e4257600080fd5b604051608081018181108382111715611e5d57611e5d611682565b6040528235611e6b8161162c565b81526020830135611e7b8161162c565b602082015260408381013590820152606083013582811115611e9c57600080fd5b611ea8878286016117c0565b60608301525095945050505050565b600060208284031215611ec957600080fd5b81518015158114610e6057600080fd5b634e487b7160e01b600052601160045260246000fd5b600061ffff808316818516808303821115611f0c57611f0c611ed9565b01949350505050565b6000600019821415611f2957611f29611ed9565b5060010190565b6000816000190483118215151615611f4a57611f4a611ed9565b500290565b600082611f6c57634e487b7160e01b600052601260045260246000fd5b500490565b60008251611f83818460208701611bf8565b9190910192915050565b602081526000610e606020830184611c24565b60008060408385031215611fb357600080fd5b8251611fbe8161162c565b602084015190925062ffffff81168114611fd757600080fd5b809150509250929050565b85815284602082015260a06040820152600061200160a0830186611c50565b6001600160a01b0394909416606083015250608001529392505050565b6000602080838503121561203157600080fd5b82516001600160401b0381111561204757600080fd5b8301601f8101851361205857600080fd5b805161206661175682611712565b81815260059190911b8201830190838101908783111561208557600080fd5b928401925b82841015610ff95783518252928401929084019061208a565b6000806000606084860312156120b857600080fd5b83516120c38161162c565b60208501519093506120d48161162c565b60408501519092506120e58161162c565b809150509250925092565b6001600160a01b0389811682528816602082015260408101879052606081018690526101006080820181905260009061212b83820188611c50565b60a0840196909652505091151560c083015260e0909101529594505050505056fea2646970667358221220468270b636b708f551a0ef072a41352a292b8d8632b036e62fb7a13054b44fe064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100785760003560e01c806301e336671461007d5780630cdabeba14610092578063715018a6146100a55780637ed1f1dd146100ad5780638da5cb5b146100c0578063d5b99797146100ad578063eb2021c3146100ad578063f2fde38b146100e2575b600080fd5b61009061008b366004611641565b6100f5565b005b6100906100a0366004611a28565b610296565b610090610645565b6100906100bb366004611ab1565b61067b565b6000546001600160a01b03166040516100d99190611b46565b60405180910390f35b6100906100f0366004611b5a565b61068f565b6000546001600160a01b031633146101285760405162461bcd60e51b815260040161011f90611b77565b60405180910390fd5b6002600154141561017b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161011f565b60026001556040516370a0823160e01b815281906001600160a01b038516906370a08231906101ae903090600401611b46565b60206040518083038186803b1580156101c657600080fd5b505afa1580156101da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fe9190611bac565b101561023f5760405162461bcd60e51b815260206004820152601060248201526f2737ba1032b737bab3b4103a37b5b2b760811b604482015260640161011f565b61024a83838361072a565b816001600160a01b03167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b658260405161028591815260200190565b60405180910390a250506001805550565b8060006102c082604001516000815181106102b3576102b3611bc5565b6020026020010151610785565b9050600082600001516001600160a01b0316634a248d2a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561030157600080fd5b505afa158015610315573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103399190611bdb565b6001600160a01b0316826001600160a01b0316149050600083600001516001600160a01b031663d4b970466040518163ffffffff1660e01b815260040160206040518083038186803b15801561038e57600080fd5b505afa1580156103a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c69190611bdb565b6001600160a01b0316836001600160a01b031614905081806103e55750805b6104315760405162461bcd60e51b815260206004820152601c60248201527f57726f6e6720666c6173686c6f616e20706f6f6c206164647265737300000000604482015260640161011f565b6040805160808101825233815286516001600160a01b031660208083019190915287810151828401528783015160608301529151600092610473929101611c94565b604051602081830303815290604052905060006104a087604001516000815181106102b3576102b3611bc5565b905086600001516001600160a01b031663d0a494e4826001600160a01b031689600001516001600160a01b0316634a248d2a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104fc57600080fd5b505afa158015610510573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105349190611bdb565b6001600160a01b03161461054957600061054f565b88602001515b836001600160a01b03168a600001516001600160a01b0316634a248d2a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561059657600080fd5b505afa1580156105aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ce9190611bdb565b6001600160a01b0316146105e65789602001516105e9565b60005b30866040518563ffffffff1660e01b815260040161060a9493929190611db5565b600060405180830381600087803b15801561062457600080fd5b505af1158015610638573d6000803e3d6000fd5b5050505050505050505050565b6000546001600160a01b0316331461066f5760405162461bcd60e51b815260040161011f90611b77565b61067960006107cb565b565b610688858585858561081b565b5050505050565b6000546001600160a01b031633146106b95760405162461bcd60e51b815260040161011f90611b77565b6001600160a01b03811661071e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161011f565b610727816107cb565b50565b6107808363a9059cbb60e01b8484604051602401610749929190611dec565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610c7b565b505050565b6000816000015160008151811061079e5761079e611bc5565b6020026020010151604001516000815181106107bc576107bc611bc5565b60200260200101519050919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061082982840184611e05565b9050600061084782606001516000815181106102b3576102b3611bc5565b90508160400151816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161087a9190611b46565b60206040518083038186803b15801561089257600080fd5b505afa1580156108a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ca9190611bac565b10156109185760405162461bcd60e51b815260206004820152601b60248201527f4661696c656420746f20626f72726f77206c6f616e20746f6b656e0000000000604482015260640161011f565b61092a82606001518360400151610d4d565b7ffdc1bd83776f7aa310fcf2b1915ae1c6c16a4cfb48ebcea2bf15febd084c03de81826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016109789190611b46565b60206040518083038186803b15801561099057600080fd5b505afa1580156109a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c89190611bac565b6040516109d6929190611dec565b60405180910390a160408083015190516370a0823160e01b81526001600160a01b038316906370a0823190610a0f903090600401611b46565b60206040518083038186803b158015610a2757600080fd5b505afa158015610a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5f9190611bac565b1015610aad5760405162461bcd60e51b815260206004820181905260248201527f4e6f7420656e6f75676820616d6f756e7420746f2072657475726e206c6f616e604482015260640161011f565b6020820151604080840151905163a9059cbb60e01b81526001600160a01b0384169263a9059cbb92610ae192600401611dec565b602060405180830381600087803b158015610afb57600080fd5b505af1158015610b0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b339190611eb7565b506040516370a0823160e01b81526000906001600160a01b038316906370a0823190610b63903090600401611b46565b60206040518083038186803b158015610b7b57600080fd5b505afa158015610b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb39190611bac565b835160405163a9059cbb60e01b81529192506001600160a01b0384169163a9059cbb91610be4918590600401611dec565b602060405180830381600087803b158015610bfe57600080fd5b505af1158015610c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c369190611eb7565b5082516040517f2b312ac7b7c9b2fc53c9398d48ed2df4c1d192a03cc090b47087b2936ba0a61f91610c69918490611dec565b60405180910390a15050505050505050565b6000610cd0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e4e9092919063ffffffff16565b8051909150156107805780806020019051810190610cee9190611eb7565b6107805760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161011f565b816000805b8251811015610d9857828181518110610d6d57610d6d611bc5565b60200260200101516020015182610d849190611eef565b915080610d9081611f15565b915050610d52565b508061ffff1661271014610de15760405162461bcd60e51b815260206004820152601060248201526f2937baba32903830b93a1032b93937b960811b604482015260640161011f565b60005b8451811015610688576000610e16868381518110610e0457610e04611bc5565b60200260200101516020015186610e67565b9050610e3b868381518110610e2d57610e2d611bc5565b602002602001015182610e84565b5080610e4681611f15565b915050610de4565b6060610e5d8484600085610ed3565b90505b9392505050565b6000612710610e7a61ffff851684611f30565b610e609190611f4f565b8060005b835151811015610ecd57610eb984600001518281518110610eab57610eab611bc5565b602002602001015183611004565b915080610ec581611f15565b915050610e88565b50505050565b606082471015610f345760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161011f565b6001600160a01b0385163b610f8b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161011f565b600080866001600160a01b03168587604051610fa79190611f71565b60006040518083038185875af1925050503d8060008114610fe4576040519150601f19603f3d011682016040523d82523d6000602084013e610fe9565b606091505b5091509150610ff9828286611066565b979650505050505050565b815160009060ff1661102a57611023836020015183856040015161109f565b9050611060565b6008836000015160ff16101561104d576110238360200151838560400151611260565b610e60836020015183856040015161134d565b92915050565b60608315611075575081610e60565b8251156110855782518084602001fd5b8160405162461bcd60e51b815260040161011f9190611f8d565b6000806000858060200190518101906110b89190611fa0565b9150915060008290506110e6856000815181106110d7576110d7611bc5565b6020026020010151828861156e565b806001600160a01b031663414bf3896040518061010001604052808860008151811061111457611114611bc5565b60200260200101516001600160a01b031681526020018860018151811061113d5761113d611bc5565b60200260200101516001600160a01b031681526020018562ffffff168152602001306001600160a01b031681526020014281526020018981526020016000815260200160006001600160a01b03168152506040518263ffffffff1660e01b815260040161120e919081516001600160a01b03908116825260208084015182169083015260408084015162ffffff16908301526060808401518216908301526080808401519083015260a0838101519083015260c0808401519083015260e09283015116918101919091526101000190565b602060405180830381600087803b15801561122857600080fd5b505af115801561123c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff99190611bac565b600080848060200190518101906112779190611bdb565b905061129e8360008151811061128f5761128f611bc5565b6020026020010151828661156e565b6040516338ed173960e01b81526001600160a01b038216906338ed1739906112d3908790600190889030904290600401611fe2565b600060405180830381600087803b1580156112ed57600080fd5b505af1158015611301573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611329919081019061201e565b60018151811061133b5761133b611bc5565b60200260200101519150509392505050565b6000806000808680602001905181019061136791906120a3565b6040805160018082528183019092529396509194509250600091906020808301908036833701905050905083816000815181106113a6576113a6611bc5565b60200260200101906001600160a01b031690816001600160a01b0316815250506000866000815181106113db576113db611bc5565b60200260200101516001600160a01b0316856001600160a01b0316634a248d2a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561142557600080fd5b505afa158015611439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145d9190611bdb565b6001600160a01b031614611472576001611475565b60005b60ff16905061149f8760008151811061149057611490611bc5565b6020026020010151858a61156e565b826001600160a01b031663f87dc1b7886000815181106114c1576114c1611bc5565b6020026020010151896001815181106114dc576114dc611bc5565b60200260200101518b600187876000426040518963ffffffff1660e01b815260040161150f9897969594939291906120f0565b602060405180830381600087803b15801561152957600080fd5b505af115801561153d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115619190611bac565b9998505050505050505050565b60405163095ea7b360e01b81526001600160a01b0384169063095ea7b39061159c9085908590600401611dec565b602060405180830381600087803b1580156115b657600080fd5b505af11580156115ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ee9190611eb7565b6107805760405162461bcd60e51b815260206004820152600f60248201526e30b8383937bb32903330b4b632b21760891b604482015260640161011f565b6001600160a01b038116811461072757600080fd5b60008060006060848603121561165657600080fd5b83356116618161162c565b925060208401356116718161162c565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156116ba576116ba611682565b60405290565b604051606081016001600160401b03811182821017156116ba576116ba611682565b604051601f8201601f191681016001600160401b038111828210171561170a5761170a611682565b604052919050565b60006001600160401b0382111561172b5761172b611682565b5060051b60200190565b600082601f83011261174657600080fd5b8135602061175b61175683611712565b6116e2565b82815260059290921b8401810191818101908684111561177a57600080fd5b8286015b8481101561179e5780356117918161162c565b835291830191830161177e565b509695505050505050565b803561ffff811681146117bb57600080fd5b919050565b600082601f8301126117d157600080fd5b6117de6117568335611712565b82358082526020808301929160051b8501018510156117fc57600080fd5b602084015b6020853560051b860101811015611a1f576001600160401b038135111561182757600080fd5b601f1960408235870188038201121561183f57600080fd5b611847611698565b6001600160401b036020843589010135111561186257600080fd5b82358701602081013501603f8101891361187b57600080fd5b61188b6117566020830135611712565b602082810135808352908201919060051b83016040018b10156118ad57600080fd5b604083015b6040602085013560051b8501018110156119ef576001600160401b03813511156118db57600080fd5b803584016060818e03603f190112156118f357600080fd5b6118fb6116c0565b604082013560ff81161461190e57600080fd5b604082013581526001600160401b036060830135111561192d57600080fd5b8d605f60608401358401011261194257600080fd5b60406060830135830101356001600160401b0381111561196457611964611682565b61197560208a601f840116016116e2565b8181528f606083606087013587010101111561199057600080fd5b81606080860135860101602083013760006020838301015280602084015250506001600160401b03608083013511156119c857600080fd5b6119db8e60406080850135850101611735565b6040820152845250602092830192016118b2565b50835250611a049050833588016040016117a9565b60208201528085525050602083019250602081019050611801565b50949350505050565b600060208284031215611a3a57600080fd5b81356001600160401b0380821115611a5157600080fd5b9083019060608286031215611a6557600080fd5b611a6d6116c0565b8235611a788161162c565b815260208381013590820152604083013582811115611a9657600080fd5b611aa2878286016117c0565b60408301525095945050505050565b600080600080600060808688031215611ac957600080fd5b8535611ad48161162c565b9450602086013593506040860135925060608601356001600160401b0380821115611afe57600080fd5b818801915088601f830112611b1257600080fd5b813581811115611b2157600080fd5b896020828501011115611b3357600080fd5b9699959850939650602001949392505050565b6001600160a01b0391909116815260200190565b600060208284031215611b6c57600080fd5b8135610e608161162c565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611bbe57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611bed57600080fd5b8151610e608161162c565b60005b83811015611c13578181015183820152602001611bfb565b83811115610ecd5750506000910152565b60008151808452611c3c816020860160208601611bf8565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b83811015611c895781516001600160a01b031687529582019590820190600101611c64565b509495945050505050565b602080825282516001600160a01b0390811683830152838201511660408084019190915283015160608084019190915280840151608080850152805160a085018190526000939260c0600583901b870181019385019290870190865b81811015611da75788860360bf190183528451805160408089528151908901819052600581901b89018701918a0190878a019060005b81811015611d8457605f198c8603018352835160ff81511686528d8101518b8f880152611d558c880182611c24565b9050604082015191508681036040880152611d708183611c50565b96505050928c0192918c0191600101611d26565b505050509088015161ffff16968801969096529386019391860191600101611cf0565b509398975050505050505050565b84815283602082015260018060a01b0383166040820152608060608201526000611de26080830184611c24565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b600060208284031215611e1757600080fd5b81356001600160401b0380821115611e2e57600080fd5b9083019060808286031215611e4257600080fd5b604051608081018181108382111715611e5d57611e5d611682565b6040528235611e6b8161162c565b81526020830135611e7b8161162c565b602082015260408381013590820152606083013582811115611e9c57600080fd5b611ea8878286016117c0565b60608301525095945050505050565b600060208284031215611ec957600080fd5b81518015158114610e6057600080fd5b634e487b7160e01b600052601160045260246000fd5b600061ffff808316818516808303821115611f0c57611f0c611ed9565b01949350505050565b6000600019821415611f2957611f29611ed9565b5060010190565b6000816000190483118215151615611f4a57611f4a611ed9565b500290565b600082611f6c57634e487b7160e01b600052601260045260246000fd5b500490565b60008251611f83818460208701611bf8565b9190910192915050565b602081526000610e606020830184611c24565b60008060408385031215611fb357600080fd5b8251611fbe8161162c565b602084015190925062ffffff81168114611fd757600080fd5b809150509250929050565b85815284602082015260a06040820152600061200160a0830186611c50565b6001600160a01b0394909416606083015250608001529392505050565b6000602080838503121561203157600080fd5b82516001600160401b0381111561204757600080fd5b8301601f8101851361205857600080fd5b805161206661175682611712565b81815260059190911b8201830190838101908783111561208557600080fd5b928401925b82841015610ff95783518252928401929084019061208a565b6000806000606084860312156120b857600080fd5b83516120c38161162c565b60208501519093506120d48161162c565b60408501519092506120e58161162c565b809150509250925092565b6001600160a01b0389811682528816602082015260408101879052606081018690526101006080820181905260009061212b83820188611c50565b60a0840196909652505091151560c083015260e0909101529594505050505056fea2646970667358221220468270b636b708f551a0ef072a41352a292b8d8632b036e62fb7a13054b44fe064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Flashloan.sol:Flashloan",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 115,
        "contract": "contracts/Flashloan.sol:Flashloan",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}